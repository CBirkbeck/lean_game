{"name": "Niki's Logic", "version": "1.0", "languages": ["en"], "translated_name": "0", "devmode": false, "library_zip_fn": "Niki's Logic-1.0-library.zip", "introData": {"name": "", "problemIndex": -1, "objects": [{"type": "text", "content": "1"}]}, "worlds": [{"name": "2", "levels": [{"name": "3", "problemIndex": 4, "objects": [{"type": "lean", "content": "4", "hidden": true}, {"type": "lean", "content": "5", "hidden": true}, {"type": "text", "content": "6"}, {"type": "hint", "content": "7", "title": "8"}, {"type": "lemma", "text": "9", "lean": "lemma l1 (P Q : Prop) (h : P \u2192 Q) ( p : P) : Q :=\n", "sideBar": true, "firstProofLineNumber": 41, "lastProofLineNumber": 42, "textBefore": "import tactic --hide\n\nuniverse u --hide\n\n-- Level name : Propositions\n\n/-\nYou've seen logical statements already, these are statements that can be true or false, for example: \n\n-The sum of two odd numbers is an even number\n-$36$ is divisible by $3$\n-$x > 2$\n\n\n\n\nLets see how one does this a computer, specifically in Lean. In lean, logical staments live in a world called `Prop`. So for example \nif we write `P : Prop` we mean \"`P` is a logical statement\"\n\nNow, we can take these statements and create new ones. For example if we have two statements `P Q : Prop` we can write\n` P \u2192 Q` to mean `P` implies `Q`. Similarly, we can write `\u00acP` for the statement \"Not `P`\". \n\nIn maths we are interested in proving logical statements, i.e. writing a proof. In lean we think of this as follows: If `P : Prop` \nis a logical stament then a proof of `P` is written as `p : P`. \n\n\n\n-/\n\n/- Hint : title_of_the_hint\nContent of the hint\n-/\n\n/- Lemma\nLets try and prove that if `P` implies `Q` (which is written ` P \u2192 Q`) and we have a proof of `P` (i.e. we have `p : P`). Then `Q` is\ntrue (i.e. we have a proof of `Q`)\n-/\n\nlemma l1 (P Q : Prop) (h : P \u2192 Q) ( p : P) : Q :=\nbegin\n", "proof": "  apply h,\n  exact p,", "proof_hint": "sorry", "textAfter": "\nend", "height": 2, "editorText": "sorry", "lineOffset": 40, "name": "l1", "statement": "(P Q : Prop) (h : P \u2192 Q) ( p : P) : Q"}]}]}, {"name": "10", "levels": [{"name": "11", "problemIndex": 3, "objects": [{"type": "lean", "content": "12", "hidden": true}, {"type": "lean", "content": "13", "hidden": true}, {"type": "text", "content": "14"}, {"type": "lemma", "text": "15", "lean": "lemma l2 (P Q : Prop)  : P \u2227  Q \u2192 Q \u2227 P :=\n", "sideBar": true, "firstProofLineNumber": 22, "lastProofLineNumber": 24, "textBefore": "import tactic --hide\n\nuniverse u --hide\n\n-- Level name : More propositions\n\n/-\nLets look at some other logical statements\n\n\n\n-/\n\n\n/- Lemma\nLets try and prove that if `P` implies `Q` (which is written ` P \u2192 Q`) and we have a proof of `P` (i.e. we have `p : P`). Then `Q` is\ntrue (i.e. we have a proof of `Q`)\n-/\n\nlemma l2 (P Q : Prop)  : P \u2227  Q \u2192 Q \u2227 P :=\nbegin\n", "proof": "  intro h ,\n  rw and_comm,\n  exact h,", "proof_hint": "sorry", "textAfter": "\nend\n", "height": 3, "editorText": "sorry", "lineOffset": 21, "name": "l2", "statement": "(P Q : Prop)  : P \u2227  Q \u2192 Q \u2227 P"}]}], "parents": [0]}], "texts": [["Niki's Logic", "# Niki's logic: The game\n\n## By Niki feat. MC Nuggz\n\nLearn some logic yo\n\n# What is this game?\n\nThis is a game to teach you some mathematical logic\n\nHave fun!\n\n# Credits\n\n\n", "Logic 1", "Propositions", "import tactic --hide\n", "universe u --hide\n", "You've seen logical statements already, these are statements that can be true or false, for example: \n\n-The sum of two odd numbers is an even number\n-$36$ is divisible by $3$\n-$x > 2$\n\n\n\n\nLets see how one does this a computer, specifically in Lean. In lean, logical staments live in a world called `Prop`. So for example \nif we write `P : Prop` we mean \"`P` is a logical statement\"\n\nNow, we can take these statements and create new ones. For example if we have two statements `P Q : Prop` we can write\n` P \u2192 Q` to mean `P` implies `Q`. Similarly, we can write `\u00acP` for the statement \"Not `P`\". \n\nIn maths we are interested in proving logical statements, i.e. writing a proof. In lean we think of this as follows: If `P : Prop` \nis a logical stament then a proof of `P` is written as `p : P`. \n\n\n\n", "Content of the hint\n", "title_of_the_hint", "Lets try and prove that if `P` implies `Q` (which is written ` P \u2192 Q`) and we have a proof of `P` (i.e. we have `p : P`). Then `Q` is\ntrue (i.e. we have a proof of `Q`)\n", "Logic 2", "More propositions", "import tactic --hide\n", "universe u --hide\n", "Lets look at some other logical statements\n\n\n\n", "Lets try and prove that if `P` implies `Q` (which is written ` P \u2192 Q`) and we have a proof of `P` (i.e. we have `p : P`). Then `Q` is\ntrue (i.e. we have a proof of `Q`)\n"]]}